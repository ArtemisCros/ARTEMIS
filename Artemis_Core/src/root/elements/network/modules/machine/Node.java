package root.elements.network.modules.machine;

import java.util.ArrayList;
import java.util.Vector;

import logger.GlobalLogger;
import logger.XmlLogger;
import root.elements.network.modules.NetworkModule;
import root.elements.network.modules.task.ISchedulable;
import root.elements.network.modules.task.NetworkMessage;
import root.util.constants.ConfigParameters;
import root.util.tools.NetworkAddress;
import utils.ConfigLogger;

public abstract class Node extends NetworkModule {
	/**
	 *  Address of the machine
	 */
	public NetworkAddress networkAddress;
	
	
	/**
	 * current load at a given instant
	 */
	public double currentLoad;
	
	
	/**
	 *  Buffering messages in an output buffer 
	 */
	public Vector<NetworkMessage> outputBuffer;
	
	/**
	 *  Buffering messages in an input buffer
	 */
	public Vector<NetworkMessage> inputBuffer;

	/**
	 *  Time for analysing a packet 
	 */
	public double analyseTime;
	
	/**
	 *  Currently transmitted message
	 */
	public NetworkMessage currentlyTransmittedMsg;
	
	/**
	 *  Contains all the messages generated by the machine 
	 */
	public ArrayList<ISchedulable> messageGenerator;
	
	/**
	 * Name of the machine
	 */
	public String name; 
	
	/**
	 * XML LOG FILE
	 */
	public String logXML;
	
	/** 
	 * XML Logger class
	 */
	public XmlLogger xmlLogger;
	
	/**
	 * Get current network address
 	 * @return the network address
	 */
	public NetworkAddress getNetworkAddress() {
		return this.networkAddress;
	}
	
	/**
	 * Sets current network address
	 * @param nAddr The network address
	 */
	public void setNetworkAddress(NetworkAddress nAddr) {
		this.networkAddress = nAddr;
	}
	
	public void setAddress(final NetworkAddress pNetworkAddress) {
		/* Associate a networkAddress for current machine */
		this.networkAddress = pNetworkAddress;
	}
	
	public NetworkAddress getAddress() {
		return this.networkAddress;
	}
	
	public int associateMessage(final ISchedulable msg) {
		messageGenerator.add(msg);
		
		return 0;
	}
	
	public int sendMessage(final NetworkMessage msg) {
		if(GlobalLogger.DEBUG_ENABLED) {
			String debug = "PUSHING "+msg.getName()+" MACHINE "+this.name;
			GlobalLogger.debug(debug);
		}
		
		outputBuffer.add(msg);

		return 0;
	}
	
	public XmlLogger createXMLLog() {
		String fileName = this.networkAddress.value+".xml";
		
		if(GlobalLogger.DEBUG_ENABLED){
			GlobalLogger.debug("Creating XML File "+fileName);
		}
		
		xmlLogger = new XmlLogger(ConfigLogger.RESSOURCES_PATH+"/"+
				ConfigParameters.getInstance().getSimuId()+"/", 
				fileName);
		xmlLogger.createDocument();
		xmlLogger.createRoot("machine");
		xmlLogger.getRoot().setAttribute("id", ""+this.networkAddress.value);
		xmlLogger.getRoot().setAttribute("name", this.name);
		
		return xmlLogger;
	}
}
